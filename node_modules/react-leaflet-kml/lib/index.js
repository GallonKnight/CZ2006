"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
require("leaflet-kml");
var L = __importStar(require("leaflet"));
var core_1 = require("@react-leaflet/core");
var react_1 = require("react");
var updateOnCanvas = function (map) {
    if (map.options.preferCanvas) {
        // @ts-ignore  
        map._renderer._update();
    }
};
var createLeafletElement = function (props, context) {
    react_1.useEffect(function () {
        return function () {
            updateOnCanvas(context.map);
        };
    }, []);
    var kml = props.kml;
    // @ts-ignore
    var instance = new L.KML(kml);
    if (context.map.options.preferCanvas) {
        setTimeout(function (map) {
            // Handling react-leaflet bug of canvas renderer not updating
            // @ts-ignore
            map._renderer._update();
        }, 0, context.map);
    }
    return { instance: instance, context: context };
};
var updateLeafletElement = function (instance, props, prevProps) {
    // @ts-ignore
    updateOnCanvas(instance._map);
};
exports.default = core_1.createLayerComponent(createLeafletElement, updateLeafletElement);
